package cc.catalysts.gradle.systemjs.task

import cc.catalysts.gradle.systemjs.SystemjsExtension
import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.task.NodeTask
import org.gradle.api.artifacts.Dependency

/**
 * @author Thomas Scheinecker, Catalysts GmbH
 */
class CreateSystemjsBundle extends NodeTask {
    CreateSystemjsBundle() {
        project.afterEvaluate({
            setScript(new File(NodeExtension.get(project).nodeModulesDir, 'node_modules/gulp/bin/gulp.js'))

            SystemjsExtension config = SystemjsExtension.get(project)

            inputs.dir(config.srcDir)
            inputs.file(new File(project.projectDir, 'gulpfile.js'))
            inputs.file(new File(project.projectDir, 'package.json'))
            outputs.dir(config.getBundleLocation())

            setArgs([
                    "--project.version=${project.version}",
                    "--destination.dir=${config.getBundleLocation()}",
                    "--bundle.name=${project.name}-bundle",
                    "--source.dir=${config.srcDir}",
                    "--include.path=${config.includePath}"
            ])

            createSystemjsWebjarConfig()
        })
    }

    boolean isWebjar(Dependency dependency) {
        return dependency.group.startsWith('org.webjars') ||
                (dependency.group == 'cc.catalysts.boot' &&
                        dependency.name == 'cat-boot-i18n-angular')
    }

    void createSystemjsWebjarConfig() {

        Map<String, String> webjarPaths = [:];

        project.configurations.forEach({ configuration ->
            configuration.dependencies.findAll { isWebjar(it) } forEach {
                webjarPaths.put(it.name, "webjars/${it.name}/${it.version}")
            }
        });

        if (webjarPaths.isEmpty()) {
            return;
        }

        StringBuilder sb = new StringBuilder()

        for (Map.Entry<String, String> entry : webjarPaths) {
            if (sb.size() != 0) {
                sb.append ",\n        "
            }
            sb.append "'webjars/$entry.key/*': '$entry.value/*'"
        }

        String webjarConfigContent = """// Generated by cat-boot-ui-gradle plugin
System.config({
    paths: {
        ${sb}
    }
});
"""
        SystemjsExtension config = project.systemjs;

        File webjarConfig = new File(config.getBundleLocation(), 'webjar-config.js')
        webjarConfig.parentFile.mkdirs()
        webjarConfig.write webjarConfigContent
    }
}
